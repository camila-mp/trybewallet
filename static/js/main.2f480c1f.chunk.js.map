{"version":3,"sources":["pages/Login.js","actions/index.js","components/WalletHeader.js","components/WalletValueInput.js","components/WalletDescriptionInput.js","components/WalletCurrencyInput.js","components/WalletTagInput.js","components/WalletPaymentMethod.js","components/WalletTable.js","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","bind","handleValidation","handleSubmit","handleUserInfo","state","email","senha","document","querySelector","disabled","this","event","target","value","name","setState","preventDefault","dispatchUserInfo","botaoEntrar","passLenght","length","emailValidation","test","className","onSubmit","htmlFor","data-testid","id","type","onChange","to","onClick","React","Component","connect","dispatch","userLogin","WalletHeader","userEmail","totalValue","toFixed","user","WalletValueInput","WalletDescriptionInput","WalletCurrencyInput","currencies","currencyFiltered","Object","keys","filter","item","map","key","WalletTagInput","WalletPaymentMethod","WalletTable","handleClick","exclude","calculateExpenses","columnName","expenses","description","tag","method","exchangeRates","currency","split","ask","renderTableHeader","renderTableInfo","wallet","excludeExpense","Wallet","idCounter","updateExpenses","fetchCurrencies","toString","fetchExchange","stateObject","prevState","fetch","response","json","data","console","error","expensesInfo","reduce","acc","expense","obj","a","App","exact","path","component","initialState","userReducer","action","loadingExchange","errorE","walletReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2f480c1f.chunk.js","sourcesContent":["import React from 'react';\nimport './login.css';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { userLogin } from '../actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleUserInfo = this.handleUserInfo.bind(this);\n\n    this.state = {\n      email: '',\n      senha: '',\n    };\n  }\n\n  componentDidMount() {\n    const botaoEntrar = document.querySelector('button');\n    botaoEntrar.disabled = true;\n  }\n\n  componentDidUpdate() {\n    const { email, senha } = this.state;\n    if (senha && email) {\n      this.handleValidation();\n    }\n  }\n\n  handleChange(event) {\n    const { value, name } = event.target;\n    this.setState(() => ({\n      [name]: value,\n    }));\n  }\n\n  handleSubmit({ target }) {\n    target.preventDefault();\n  }\n\n  handleUserInfo(email, senha) {\n    const { dispatchUserInfo } = this.props;\n    dispatchUserInfo(email, senha);\n  }\n\n  handleValidation() {\n    const botaoEntrar = document.querySelector('button');\n    botaoEntrar.disabled = true;\n    const MIN_PASSWORD_LENGTH = 6;\n    const { email, senha } = this.state;\n    const passLenght = senha.length;\n    const emailValidation = /\\S+@\\S+\\.\\S+/.test(email);\n    if (passLenght >= MIN_PASSWORD_LENGTH && emailValidation === true) {\n      botaoEntrar.disabled = false;\n    }\n  }\n\n  render() {\n    const { email, senha } = this.state;\n    return (\n      <div className=\"login-div\">\n        <h1>WebWallet</h1>\n        <h2>Login</h2>\n        <form className=\"login-form\" onSubmit={ this.handleSubmit }>\n          <label htmlFor=\"email\">\n            Email:\n            <input\n              data-testid=\"email-input\"\n              id=\"email\"\n              type=\"text\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"senha\">\n            Senha:\n            <input\n              data-testid=\"password-input\"\n              id=\"senha\"\n              type=\"password\"\n              name=\"senha\"\n              value={ senha }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <Link to=\"/carteira\">\n            <button\n              className=\"login-button\"\n              type=\"submit\"\n              onClick={\n                () => this.handleUserInfo(email, senha)\n              }\n            >\n              Entrar\n            </button>\n          </Link>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserInfo: (email, senha) => dispatch(userLogin(email, senha)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  dispatchUserInfo: propTypes.func.isRequired,\n};\n","export const USER_LOGIN = 'USER_LOGIN';\nexport const WALLET_USER_EXPENSE = 'WALLET_USER_EXPENSE';\nexport const EXCLUDE_EXPENSE = 'EXCLUDE_EXPENSE';\nexport const REQ_EXCHANGE_R = 'REQ_EXCHANGE_R';\nexport const REC_EXCHANGE_R = 'REC_EXCHANGE_R';\nexport const ERR_EXCHANGE_R = 'ERR_EXCHANGE_R';\n\nexport const userLogin = (email, senha) => ({\n  type: USER_LOGIN,\n  email,\n  senha,\n});\n\nexport const userExpense = (expense) => ({\n  type: WALLET_USER_EXPENSE,\n  expense,\n});\n\nexport const excludeExpense = (id) => ({\n  type: EXCLUDE_EXPENSE,\n  id,\n});\n\nexport const reqExchangeR = () => ({\n  type: REQ_EXCHANGE_R,\n});\n\nexport const recExchangeR = () => ({\n  type: REC_EXCHANGE_R,\n});\n\nexport const errExchangeR = () => ({\n  type: ERR_EXCHANGE_R,\n});\n\nexport function thunkExchange(obj) {\n  return async (dispatch) => {\n    dispatch((reqExchangeR()));\n    try {\n      const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const data = await response.json();\n      obj.exchangeRates = data;\n      return dispatch(userExpense(obj));\n    } catch (error) {\n      console.error(error);\n      return dispatch(errExchangeR());\n    }\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nclass WalletHeader extends React.Component {\n  render() {\n    const { userEmail, totalValue } = this.props;\n    return (\n      <header>\n        <h1>WebWallet</h1>\n        <h3 data-testid=\"email-field\">\n          Email:&nbsp;\n          {userEmail}\n        </h3>\n        <h3>\n          Despesa total: R$&nbsp;\n          <span data-testid=\"total-field\">{totalValue.toFixed(2)}</span>\n        </h3>\n        <h3 data-testid=\"header-currency-field\">Moeda: BRL</h3>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user }) => ({\n  userEmail: user.email,\n});\n\nexport default connect(mapStateToProps, null)(WalletHeader);\n\nWalletHeader.propTypes = {\n  userEmail: propTypes.string.isRequired,\n  totalValue: propTypes.number.isRequired,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass WalletValueInput extends React.Component {\n  render() {\n    const { handleChange } = this.props;\n    return (\n      <label htmlFor=\"valor\">\n        Valor\n        <input\n          type=\"text\"\n          id=\"valor\"\n          name=\"value\"\n          onChange={ handleChange }\n        />\n      </label>\n    );\n  }\n}\n\nWalletValueInput.propTypes = {\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default WalletValueInput;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass WalletDescriptionInput extends React.Component {\n  render() {\n    const { handleChange } = this.props;\n    return (\n      <label htmlFor=\"descricao\">\n        Descrição\n        <input\n          type=\"text\"\n          id=\"descricao\"\n          name=\"description\"\n          onChange={ handleChange }\n        />\n      </label>\n    );\n  }\n}\n\nWalletDescriptionInput.propTypes = {\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default WalletDescriptionInput;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass WalletCurrencyInput extends React.Component {\n  render() {\n    const { currencies, handleChange } = this.props;\n    const listaMoedas = Object.keys(currencies);\n    const currencyFiltered = listaMoedas\n      .filter((item) => item !== 'USDT' && item !== 'DOGE');\n    return (\n      <label htmlFor=\"moeda\">\n        Moeda&nbsp;\n        <select\n          className=\"select\"\n          type=\"text\"\n          id=\"moeda\"\n          name=\"currency\"\n          onChange={ handleChange }\n        >\n          { currencyFiltered\n            .map((item) => <option key={ item }>{item}</option>) }\n        </select>\n      </label>\n    );\n  }\n}\n\nWalletCurrencyInput.propTypes = {\n  handleChange: propTypes.func.isRequired,\n  currencies: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\nexport default WalletCurrencyInput;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass WalletTagInput extends React.Component {\n  render() {\n    const { handleChange } = this.props;\n    return (\n      <label htmlFor=\"tag\">\n        Tag&nbsp;\n        <select\n          className=\"select\"\n          type=\"text\"\n          id=\"tag\"\n          name=\"tag\"\n          onChange={ handleChange }\n        >\n          <option>Alimentação</option>\n          <option>Lazer</option>\n          <option>Trabalho</option>\n          <option>Transporte</option>\n          <option>Saúde</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nWalletTagInput.propTypes = {\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default WalletTagInput;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass WalletPaymentMethod extends React.Component {\n  render() {\n    const { handleChange } = this.props;\n    return (\n      <label htmlFor=\"met-pagamento\">\n        Método de pagamento&nbsp;\n        <select\n          className=\"select\"\n          type=\"text\"\n          id=\"met-pagamento\"\n          name=\"method\"\n          onChange={ handleChange }\n        >\n          <option>Dinheiro</option>\n          <option>Cartão de crédito</option>\n          <option>Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nWalletPaymentMethod.propTypes = {\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default WalletPaymentMethod;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { excludeExpense } from '../actions';\n// link consultado para aprender a fazer a tabela: https://dev.to/abdulbasit313/an-easy-way-to-create-a-customize-dynamic-table-in-react-js-3igg\n\nclass WalletTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  async handleClick(id) {\n    const { exclude, calculateExpenses } = this.props;\n    await exclude(id);\n    calculateExpenses();\n  }\n\n  renderTableHeader() {\n    const header = [\n      'Descrição', 'Tag', 'Método de pagamento', 'Valor', 'Moeda', 'Câmbio utilizado',\n      'Valor convertido', 'Moeda de conversão', 'Excluir'];\n    return header.map((columnName) => <th key={ columnName }>{ columnName }</th>);\n  }\n\n  renderTableInfo() {\n    const { expenses } = this.props;\n    if (expenses.length > 0) {\n      return (\n        expenses.map((item) => (\n          <tr key={ item.id }>\n            <td>{ item.description }</td>\n            <td>{ item.tag }</td>\n            <td>{ item.method }</td>\n            <td>{ (+item.value) }</td>\n            <td>{ item.exchangeRates[item.currency].name.split('/')[0] }</td>\n            <td>{ (+item.exchangeRates[item.currency].ask).toFixed(2) }</td>\n            <td>{ (item.exchangeRates[item.currency].ask * item.value).toFixed(2) }</td>\n            <td>Real</td>\n            <td>\n              <button\n                type=\"button\"\n                data-testid=\"delete-btn\"\n                className=\"delete-button\"\n                onClick={ () => this.handleClick(item.id) }\n              >\n                Excluir\n              </button>\n\n            </td>\n          </tr>))\n      );\n    }\n  }\n\n  render() {\n    return (\n      <table className=\"expenses-table\">\n        <tbody>\n          <tr>{ this.renderTableHeader() }</tr>\n          {this.renderTableInfo()}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet }) => ({\n  expenses: wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  exclude: (id) => dispatch(excludeExpense(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletTable);\n\nWalletTable.propTypes = {\n  calculateExpenses: propTypes.func.isRequired,\n  expenses: propTypes.arrayOf(propTypes.object).isRequired,\n  exclude: propTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport './wallet.css';\nimport WalletHeader from '../components/WalletHeader';\nimport { thunkExchange } from '../actions';\nimport WalletValueInput from '../components/WalletValueInput';\nimport WalletDescriptionInput from '../components/WalletDescriptionInput';\nimport WalletCurrencyInput from '../components/WalletCurrencyInput';\nimport WalletTagInput from '../components/WalletTagInput';\nimport WalletPaymentMethod from '../components/WalletPaymentMethod';\nimport WalletTable from '../components/WalletTable';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.idCounter = this.idCounter.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.updateExpenses = this.updateExpenses.bind(this);\n    this.calculateExpenses = this.calculateExpenses.bind(this);\n\n    this.state = {\n      currencies: {},\n      totalValue: 0,\n      id: -1,\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCurrencies();\n  }\n\n  handleChange(event) {\n    const { name } = event.target;\n    let { value } = event.target;\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async updateExpenses() {\n    this.idCounter();\n    const { fetchExchange } = this.props;\n    const { value, description, currency, method, tag, id } = this.state;\n    const stateObject = {\n      id: id + 1,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n    };\n    await fetchExchange(stateObject);\n    this.calculateExpenses();\n  }\n\n  idCounter() {\n    this.setState((prevState) => ({\n      id: prevState.id + 1,\n    }));\n  }\n\n  async fetchCurrencies() {\n    try {\n      const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const data = await response.json();\n      this.setState({\n        currencies: data,\n      });\n    } catch (error) {\n      return console.error(error);\n    }\n  }\n\n  calculateExpenses() {\n    const { expensesInfo } = this.props;\n    const totalValue = expensesInfo.reduce((acc, { value, currency, exchangeRates }) => {\n      const convertedValue = +value * exchangeRates[currency].ask;\n      return convertedValue + acc;\n    }, 0);\n    this.setState({ totalValue });\n  }\n\n  render() {\n    const { currencies, totalValue } = this.state;\n    return (\n      <div>\n        <WalletHeader totalValue={ totalValue } />\n        <form className=\"wallet-form\">\n          <WalletValueInput handleChange={ this.handleChange } />\n          <WalletDescriptionInput handleChange={ this.handleChange } />\n          <WalletCurrencyInput\n            handleChange={ this.handleChange }\n            currencies={ currencies }\n          />\n          <WalletTagInput handleChange={ this.handleChange } />\n          <WalletPaymentMethod handleChange={ this.handleChange } />\n          <button\n            className=\"expense-button\"\n            type=\"button\"\n            onClick={ this.updateExpenses }\n          >\n            Adicionar despesa\n          </button>\n        </form>\n        <WalletTable calculateExpenses={ this.calculateExpenses } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expensesInfo: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchExchange: (expense) => dispatch(thunkExchange(expense)),\n});\n\nWallet.propTypes = {\n  fetchExchange: propTypes.func.isRequired,\n  expensesInfo: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app-div\">\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { USER_LOGIN } from '../actions';\n\nconst initialState = {\n  email: '',\n  senha: '',\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n  case USER_LOGIN:\n    return { email: action.email, senha: action.senha };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import {\n  WALLET_USER_EXPENSE,\n  REQ_EXCHANGE_R,\n  REC_EXCHANGE_R,\n  ERR_EXCHANGE_R,\n  EXCLUDE_EXPENSE,\n} from '../actions/index';\n\nconst initialState = {\n  expenses: [],\n  loadingExchange: false,\n  errorE: false,\n};\n\nconst walletReducer = (state = initialState, action) => {\n  switch (action.type) {\n  case EXCLUDE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((item) => item.id !== action.id),\n    };\n  case WALLET_USER_EXPENSE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        action.expense,\n      ],\n    };\n  case REQ_EXCHANGE_R:\n    return {\n      ...state,\n      loadingExchange: true,\n    };\n  case REC_EXCHANGE_R:\n    return {\n      ...state,\n      loadingExchange: false,\n    };\n  case ERR_EXCHANGE_R:\n    return {\n      ...state,\n      errorE: true,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}